name: Build, push, and deploy

on:
  push:
    branches:
      - master
env:
  APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
  ORACLE_INIT: initdb.sql
  ORACLE_ARGS:  -d -p 1521:1521 --name oracle-xe -e ORACLE_DISABLE_ASYNCH_IO=true -e TZ=Europe/Oslo
  ORACLE_IMAGE: wnameless/oracle-xe-11g-r2
  ORACLE_SID: XE
  ORACLE_HOME: /u01/app/oracle/product/11.2.0/xe
  CLUSTER: dev-fss
  NAMESPACE: t4
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  IMAGE_BASE: docker.pkg.github.com/${{ github.repository }}/fplos

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

      - name: Sjekk ut kode
        uses: actions/checkout@v2
      - run:  git fetch --prune --unshallow

      - name: Cache maven repository
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Setup Java 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11

      - name: Hent tag
        run: echo "::set-env name=TAG::$(git log -1 --pretty='%ad' --date=format:'%Y%m%d%H%M%S')-$(echo $GITHUB_SHA | cut -c1-7)"

      - name: Hent og start Oracle image
        id: oracle
        shell: bash
        run: |
          echo "Henter og starter Oracle image $ORACLE_IMAGE"
          echo "##[set-output name=pod;]$(docker run $ORACLE_ARGS $ORACLE_IMAGE)"

      - name: Vent 60 sekunder på Oracle oppstart
        shell: bash
        run: |
          echo "Venter på oppstart av Oracle pod ${{ steps.oracle.outputs.pod }}"
          sleep 60
          docker cp $ORACLE_INIT ${{ steps.oracle.outputs.pod }}:/$ORACLE_INIT
          docker exec -e ORACLE_SID=$ORACLE_SID -e PATH=$PATH:$ORACLE_HOME/bin -e ORACLE_HOME=$ORACLE_HOME ${{ steps.oracle.outputs.pod }} sqlplus system/oracle @$ORACLE_INIT

      - name: Kompiler
        run: |
          echo "::set-env name=IMAGE::$IMAGE_BASE:$TAG"
          mvn jacoco:prepare-agent install -e --quiet --batch-mode --settings .github/workflows/.m2/settings.xml   -Djacoco.destFile=$(pwd)/target/jacoco.exec
#          mvn jacoco:report sonar:sonar -e --batch-mode --settings .github/workflows/.m2/settings.xml -Djacoco.dataFile=$(pwd)/target/jacoco.exec  -Dsonar.login=${SONAR} -Dsonar.projectKey=navikt_fplos
        env:
          TZ: Europe/Oslo
          GITHUB_USERNAME: x-access-token
          GITHUB_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
          #SONAR: ${{ secrets.SONAR }}


      - name: Bygg, tag og push Docker image
        run: |
          docker build --tag $IMAGE --tag $IMAGE_BASE:latest .
          echo  $GITHUB_TOKEN | docker login docker.pkg.github.com -u ${GITHUB_REPOSITORY} --password-stdin
          docker push $IMAGE_BASE

      - name: Opprett deployment issue
        if: success()
        uses: maxkomarychev/oction-create-issue@v0.7.1
        id: createdeployissue
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: Bygg av ${{ env.TAG }}
          body: |
            Kommenter med <b>/promote ${{ env.TAG }} cluster namespace</b>, hvor <b>cluster</b> er et gyldig clusternavn og <b>namespace</b> et eksisterende namespace i det clusteret.
            <table>
            <tr><th>Cluster</th><th>Namespace</th></tr>
            <tr><td>dev-fss</td><td>t4,q1</td></tr>
            <tr><td>prod-fss</td><td>default</td></tr>
            </table>

      - name: Trigg deploy til dev-fss t4
        if: success()
        uses: actions/github-script@0.3.0
        with:
          github-token: ${{secrets.NOTIFICATION}}
          script: |
            const issue = { owner: context.issue.owner,
                            repo: context.issue.repo,
                            issue_number: ${{ steps.createdeployissue.outputs.number }} }
            github.issues.createComment({...issue,
                                    title: 'Deploy av ${{ env.TAG }}',
                                    body: '/promote ${{ env.TAG }} ${{ env.CLUSTER }} ${{ env.NAMESPACE }}'})

